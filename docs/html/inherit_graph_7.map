<map id="Graphical Class Hierarchy" name="Graphical Class Hierarchy">
<area shape="rect" id="node1" href="$classfatfs_1_1IO.html" title="FatFS interface definition." alt="" coords="5,157,80,184"/>
<area shape="rect" id="node2" href="$classfatfs_1_1BaseIO.html" title="Empty IO implementation that we can use to test the compilation." alt="" coords="154,81,261,108"/>
<area shape="rect" id="node7" href="$classfatfs_1_1MultiIO.html" title="File system driver which supports multiple drives: Add the drivers by calling add() then call mount()..." alt="" coords="154,132,261,159"/>
<area shape="rect" id="node8" href="$classfatfs_1_1RamIO.html" title="The data is stored in RAM. In a ESP32 when PSRAM has been activated we store it is PSRAM." alt="" coords="155,183,259,209"/>
<area shape="rect" id="node9" href="$classfatfs_1_1StreamIO.html" title="template class which expects a Stream class which provides the following additional methods" alt="" coords="128,233,287,260"/>
<area shape="rect" id="node3" href="$classfatfs_1_1SDArduinoSPIIO.html" title="Accessing a SD card via the Arduino SPI API." alt="" coords="336,5,499,32"/>
<area shape="rect" id="node4" href="$classfatfs_1_1SDBitBangSPIIO.html" title="Accessing a SD card via SPI using bit banging." alt="" coords="336,56,499,83"/>
<area shape="rect" id="node5" href="$classfatfs_1_1SDSPISTM32IO.html" title="SPI interface for STM32 microcontrollers." alt="" coords="339,107,495,133"/>
<area shape="rect" id="node6" href="$classfatfs_1_1SDSTM32DiskIO.html" title="Depending on the usecase, the SD card initialization could be done at the application level,..." alt="" coords="335,157,500,184"/>
</map>
